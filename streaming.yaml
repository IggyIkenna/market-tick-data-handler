# Unified Streaming Configuration
# Single configuration file for all streaming operations

# Streaming modes to enable
modes:
  - serve    # Enable in-memory/Redis serving for downstream services
  - persist  # Enable BigQuery persistence for analytics

# Data types configuration
data_types:
  trades:
    enabled: true
    source: tardis_realtime
    batch_timeout: 60000      # 1 minute for high-frequency data
    fallback: false
    
  book_snapshots:
    enabled: true
    source: tardis_realtime
    batch_timeout: 60000      # 1 minute for high-frequency data
    fallback: false
    
  liquidations:
    enabled: true
    source: trade_transformation  # Can derive from trades
    batch_timeout: 900000     # 15 minutes for lower-frequency data
    fallback: true
    
  derivative_ticker:
    enabled: true
    source: tardis_realtime
    batch_timeout: 900000     # 15 minutes for lower-frequency data
    fallback: false
    
  options_chain:
    enabled: true
    source: tardis_realtime
    batch_timeout: 900000     # 15 minutes for lower-frequency data
    fallback: false
    
  funding_rates:
    enabled: true
    source: derivative_ticker_extraction  # Extract from derivative ticker
    batch_timeout: 900000     # 15 minutes for lower-frequency data
    fallback: true

# Serve mode configuration (for downstream services)
serve:
  transport: redis           # inmemory, redis, grpc
  redis_url: redis://localhost:6379
  redis_db: 0
  max_queue_size: 1000
  enable_persistence: false  # Also save to GCS (optional)
  gcs_bucket: null

# Persist mode configuration (BigQuery)
persist:
  bigquery:
    project_id: ${GCP_PROJECT_ID}
    dataset_live: market_data_streaming_live      # Live data dataset
    dataset_historical: market_data_streaming     # Historical data dataset
    batch_size: 1000
    batch_timeout_ms: 60000   # 1 minute for high-frequency data
    max_batch_timeout_ms: 300000  # 5 minutes absolute maximum
    
    # Partitioning strategy
    live_partitioning:
      type: HOUR              # 5-minute granularity via HOUR partitioning
      field: timestamp_out
      ttl_days: 30            # 30-day TTL for live data
      
    historical_partitioning:
      type: DAY               # 1-day partitioning
      field: timestamp_out
      ttl_days: null          # No TTL for historical data
    
    # Clustering (same for both live and historical)
    clustering_fields: ["exchange", "symbol"]
    
    # Cost optimization
    enable_cost_optimization: true
    cost_alert_threshold_usd: 100.0  # Alert if daily cost exceeds $100

# Candle processing configuration
candles:
  timeframes: ["15s", "1m", "5m", "15m", "4h", "24h"]
  enable_hft_features: true
  hft_timeframes: ["15s", "1m"]  # Only compute HFT features for high-frequency timeframes
  max_history: 100
  buffer_size: 1000

# HFT features configuration
hft_features:
  enabled: true
  timeframes: ["15s", "1m"]
  features:
    # Moving averages
    - sma_5
    - sma_10
    - sma_20
    - ema_5
    - ema_10
    - ema_20
    - wma_5
    
    # Momentum
    - price_momentum_3
    - price_momentum_5
    - price_velocity
    - price_acceleration
    
    # Volume
    - volume_sma_5
    - volume_ema_5
    - volume_ratio
    - vwap_deviation
    
    # Volatility
    - price_volatility_5
    - price_volatility_10
    - high_low_ratio
    - close_to_close_return
    
    # Microstructure
    - trade_intensity
    - avg_trade_size
    - price_impact
    - bid_ask_spread_proxy
    
    # Technical indicators
    - rsi_5
    - bollinger_position
    - macd_signal

# Live instruments configuration (Issue #004)
live_instruments:
  enabled: true
  exchanges: ["binance", "deribit", "coinbase"]
  refresh_interval: 300     # 5 minutes
  cache_ttl: 600           # 10 minutes
  
  # Exchange mappings (VENUE -> CCXT)
  exchange_mappings:
    BINANCE-SPOT: binance
    BINANCE-FUTURES: binance
    DERIBIT: deribit
    COINBASE-SPOT: coinbase
    KRAKEN-SPOT: kraken
    
  # Filters
  filters:
    base_currencies: ["BTC", "ETH", "ADA", "SOL", "MATIC", "AVAX"]
    quote_currencies: ["USDT", "USD", "BTC", "ETH"]
    types: ["spot", "swap", "future", "option"]
    min_volume_24h: 1000000  # Minimum 24h volume in USD

# Node.js ingestion layer configuration
nodejs:
  tardis_api_key: ${TARDIS_API_KEY}
  symbols: ["BTC-USDT", "ETH-USDT"]
  exchanges: ["binance", "deribit"]
  data_types: ["trades", "book_snapshots", "liquidations", "derivative_ticker"]
  
  # Communication with Python processor
  python_bridge:
    method: http             # http, websocket, ipc
    host: localhost
    port: 8081
    timeout_ms: 5000

# Monitoring and logging
monitoring:
  enabled: true
  metrics_interval: 60     # seconds
  log_level: INFO
  structured_logging: true
  
  # Health checks
  health_check:
    enabled: true
    port: 8080
    endpoint: /health
    
  # Alerting thresholds
  alerts:
    max_error_rate: 0.05    # 5% error rate
    max_latency_ms: 1000    # 1 second processing latency
    min_throughput_per_sec: 10  # Minimum 10 ticks/second

# Development and testing
development:
  mock_data: false         # Use mock data instead of real Tardis API
  replay_historical: true  # Fallback to historical replay if real-time fails
  test_symbols: ["BTC-USDT", "ETH-USDT"]
  test_duration: 300       # 5 minutes for testing
