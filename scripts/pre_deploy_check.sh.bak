#!/bin/bash

# Pre-deployment check script
# Runs quality gates and environment validation before deployment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Pre-Deployment Check${NC}"
echo "=========================="

# Check if we're in the right directory
if [ ! -f "src/main.py" ]; then
    echo -e "${RED}‚ùå Error: Not in project root directory${NC}"
    echo "Please run this script from the project root"
    exit 1
fi

# Check if Python is available
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Error: Python3 not found${NC}"
    exit 1
fi

# Check if required packages are installed
echo -e "${YELLOW}üì¶ Checking dependencies...${NC}"
if ! python3 -c "import pytest, aiohttp, pandas, google.cloud" 2>/dev/null; then
    echo -e "${RED}‚ùå Error: Required packages not installed${NC}"
    echo "Please run: pip install -r requirements.txt"
    exit 1
fi
echo -e "${GREEN}‚úÖ Dependencies OK${NC}"

# Check environment variables
echo -e "${YELLOW}üîß Checking environment...${NC}"

# Check if .env file exists
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: .env file not found${NC}"
    echo "Creating from template..."
    if [ -f "env.example" ]; then
        cp env.example .env
        echo -e "${YELLOW}‚ö†Ô∏è  Please edit .env with your actual values${NC}"
    else
        echo -e "${RED}‚ùå Error: No .env or env.example file found${NC}"
        exit 1
    fi
fi

# Load environment variables
if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# Check required environment variables
REQUIRED_VARS=("TARDIS_API_KEY" "GCP_PROJECT_ID" "GCS_BUCKET")
MISSING_VARS=()

for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        MISSING_VARS+=("$var")
    fi
done

if [ ${#MISSING_VARS[@]} -ne 0 ]; then
    echo -e "${RED}‚ùå Error: Missing required environment variables:${NC}"
    for var in "${MISSING_VARS[@]}"; do
        echo "  - $var"
    done
    echo "Please set these in your .env file"
    exit 1
fi

echo -e "${GREEN}‚úÖ Environment OK${NC}"

# Check GCS credentials
echo -e "${YELLOW}‚òÅÔ∏è  Checking GCS credentials...${NC}"
if [ -n "$GCP_CREDENTIALS_PATH" ] && [ -f "$GCP_CREDENTIALS_PATH" ]; then
    export GOOGLE_APPLICATION_CREDENTIALS="$GCP_CREDENTIALS_PATH"
    echo -e "${GREEN}‚úÖ GCS credentials file found${NC}"
elif [ -n "$GOOGLE_APPLICATION_CREDENTIALS" ] && [ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
    echo -e "${GREEN}‚úÖ GCS credentials file found${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: GCS credentials file not found${NC}"
    echo "Please ensure GCP_CREDENTIALS_PATH or GOOGLE_APPLICATION_CREDENTIALS is set"
fi

# Test GCS connection
echo -e "${YELLOW}üîó Testing GCS connection...${NC}"
if python3 -c "
from google.cloud import storage
try:
    client = storage.Client()
    bucket = client.bucket('$GCS_BUCKET')
    # Try to list objects (this will fail if bucket doesn't exist or no permissions)
    list(bucket.list_blobs(max_results=1))
    print('GCS connection successful')
except Exception as e:
    print(f'GCS connection failed: {e}')
    exit(1)
" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ GCS connection OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: GCS connection test failed${NC}"
    echo "This may be due to network issues or missing permissions"
fi

# Test Tardis API key
echo -e "${YELLOW}üîë Testing Tardis API key...${NC}"
if python3 -c "
import os
api_key = os.getenv('TARDIS_API_KEY')
if not api_key:
    print('TARDIS_API_KEY not set')
    exit(1)
if not api_key.startswith('TD.'):
    print('TARDIS_API_KEY format invalid')
    exit(1)
print('Tardis API key format OK')
" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Tardis API key OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Tardis API key validation failed${NC}"
    echo "Please check your TARDIS_API_KEY in .env"
fi

# Run quality gates
echo -e "${YELLOW}üß™ Running quality gates...${NC}"
if python3 tests/run_quality_gates.py; then
    echo -e "${GREEN}‚úÖ Quality gates passed${NC}"
else
    echo -e "${RED}‚ùå Quality gates failed${NC}"
    echo "Please fix the failing tests before deployment"
    exit 1
fi

# Check disk space
echo -e "${YELLOW}üíæ Checking disk space...${NC}"
AVAILABLE_SPACE=$(df . | tail -1 | awk '{print $4}')
if [ "$AVAILABLE_SPACE" -lt 1000000 ]; then  # Less than 1GB
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Low disk space (${AVAILABLE_SPACE}KB available)${NC}"
    echo "Consider freeing up space before deployment"
else
    echo -e "${GREEN}‚úÖ Disk space OK${NC}"
fi

# Check memory
echo -e "${YELLOW}üß† Checking memory...${NC}"
if command -v free &> /dev/null; then
    AVAILABLE_MEMORY=$(free -m | awk 'NR==2{print $7}')
    if [ "$AVAILABLE_MEMORY" -lt 1000 ]; then  # Less than 1GB
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Low available memory (${AVAILABLE_MEMORY}MB)${NC}"
        echo "Consider closing other applications before deployment"
    else
        echo -e "${GREEN}‚úÖ Memory OK${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Cannot check memory (free command not available)${NC}"
fi

# Final summary
echo ""
echo -e "${BLUE}üìä Pre-Deployment Summary${NC}"
echo "=========================="
echo -e "${GREEN}‚úÖ All checks passed!${NC}"
echo ""
echo -e "${BLUE}üöÄ Ready for deployment!${NC}"
echo ""
echo "Next steps:"
echo "1. Run your deployment script"
echo "2. Monitor the deployment logs"
echo "3. Verify the deployment is working correctly"
echo ""
echo -e "${YELLOW}üí° Tip: Keep this terminal open to monitor deployment progress${NC}"
